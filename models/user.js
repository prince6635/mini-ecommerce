'use strict';

var mongoose = require('mongoose');
// bcrypt is for hashing the password
var bcrypt = require('bcrypt-nodejs');
var Schema = mongoose.Schema;

/* Step 1: the user schema attributes / fields */
var UserSchema = Schema({
    email: { type: String, unique: true, lowercase: true }, // Force all emails saved to DB are lower cases
    password: String,

    profile: {
        name: { type: String, default: '' },
        picture: { type: String, default: '' }
    },

    address: String,

    // For purchasing history
    history: [{
        date: Date,
        paid: { type: Number, default: 0 },
        // item: { type: Schema.Type.ObjectId, ref: '' }
    }]
});

/* Step 2: Hash the password before we even save it to the database. */
// Pre-operation that happens before the actual save
UserSchema.pre('save', function (next) {
    var user = this;

    if (!user.isModified('password')) return next();

    bcrypt.genSalt(10, function (err, salt) {
        // salt is generated by bcrypt.genSalt (lenghth is 10) and will be used for hashing the password
        if (err) return next(err);

        bcrypt.hash(user.password, salt, null, function (err, hash) {
            // hash is generated by bcrypt.hash, which is hashing user's password with salt
            if (err) return next(err);

            // The hashed password that's saved in DB
            user.password = hash;
            next();
        });
    });
});

/* Step 3: compare password in the database and the one that the user type in */
// Add a customized method: comparePassword into UserSchema.methods
UserSchema.methods.comparePassword = function (password) {
    return bcrypt.compareSync(password, this.password);
}

// Export the whole User schema from this file to others
module.exports = mongoose.model('User', UserSchema);
